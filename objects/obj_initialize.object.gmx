<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.startselection = 0; // startgame = 0 // tutorial = 1 // keeps track of selection
global.startselectlock = 1; // locked = 0 // unlocked = 1 // locks level selection during obj_titlescreen_selector sliding
global.startselectoptionlock = 1; // locked = 0 // unlocked = 1 // locks ability to select level after level is chosen
global.fadein = 0; // fadein = 0 // fadeout = 1 // states whether to fade in or out

global.button1state = false; // false = off // true = on // controls buttonstate of obj_button1
global.button2state = false; // false = off // true = on // controls buttonstate of obj_button2
global.button3state = false; // false = off // true = on // controls buttonstate of obj_button3
global.button4state = false; // false = off // true = on // controls buttonstate of obj_button4
global.button5_n1state = false; // false = off // true = on // controls buttonstate of obj_button5_n1
global.button5_n2state = false; // false = off // true = on // controls buttonstate of obj_button5_n2
global.button6state = false; // false = off // true = on // controls buttonstate of obj_button6

global.lever1state = false; // false = off // true = on // controls buttonstate of obj_lever1
global.lever2state = false; // false = off // true = on // controls buttonstate of obj_lever2

global.movecontrollock = true; // notlocked = false // locked = true // controls locking player movement
global.blockmovelock = false; // notlocked = false // locked = true // controls locking pushblock movement

global.block1stuck = false // not in use
global.block1stuckdir = 0 // 1 = 0deg // 2 = 90deg // 3 = 180 deg // 4 = 270deg

global.playermoving = 0; // moving = 1 // not moving = 0 // not in use
global.level = 0; // not in use

global.bosswave = 1; // controls which wave number //
global.enemies = 0;

// if room is start cut //
if room = room_start_cut {

    // set text parameters //
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    draw_set_font(fnt_start_cut);
    draw_set_colour(c_white);
    
    
    starttext = true; // enabled = true // disabled = false // controls one time usage of code
    starthold = true; // enabled = true // disabled = false // holds starting text for a short time
    strcharpos = 0; // position of list to take character from
    scrolltimer = 0 // timer to control text holding and rate of scrolling of text
    printed = "&gt;" // the text to be printed
    // ylinechange = 0; // amount of y to be changed for a new line
    
    // create lists of text by letter for each line //
    
    page1 = "&gt;  Welcome, to _________.
    #You've signed up to be a test subject for an obscure
    #company you've never heard of before, but the pay was
    #good, so you decided to go for it. They picked you up
    #in a military grade car with tinted windows and drive
    #you off to an unknown location. "

    /* line1 = ds_list_create();
    ds_list_add(line1, "  ", "T", "e", "s", "t", "i", "n", "g", ".", " ", "T", "h", "i", "s", " ", "i", "s", " ", "t", "e", "d", "i", "o", "u", "s")
    */
    
    // line2 = "This is a line two, the game will crash after this one# lkj lkj lkj lkj lkj lkj lkj #uoiuoiuiouo"
    
    /* line2 = ds_list_create();
    ds_list_add(line2, "", "T", "e", "s", "t", "i", "n", "g", ".");
    */
    
    printedline = page1; // set the current printing line
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing recording circle ////

with obj_player {
    if recording = true {
        draw_circle_colour(10,10, 4, c_green, c_green, false);
    }  
    
    if recording = false and playback = false {
        draw_circle_colour(10,10, 4, c_red, c_red, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// title screen drawing start ///

// draws out selections in the title screen, create selector reference //
if room = room_title_screen {
    draw_set_halign(fa_middle);
    draw_set_valign(fa_middle);
    draw_set_font(fnt_startscreen);
    draw_set_colour(c_gray);
    
    //instance_create(480,317,obj_titlescreen_selector_ref);
    
    draw_text(480,317,"Start  Game");
    draw_text(480,387,"Tutorial");

// colours selection word white when obj_titlescreen_selector selects it //
    if global.startselection = 0 and obj_titlescreen_selector_left.x &lt; obj_titlescreen_selector_ref_top.x - 130 {
        draw_set_colour(c_white);
        draw_text(480,317,"Start  Game");
    }
    
    if global.startselection = 1  and obj_titlescreen_selector_left.x &gt; obj_titlescreen_selector_ref_bot.x - 120  {
        draw_set_colour(c_white);
        draw_text(480,387,"Tutorial");
    }
}

/// title screen drawing end ///
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start game cut ///

// if room is start cut //
if room = room_start_cut {

    // if starttext enabled, draw starting text //
    if starttext = true {
        draw_text(128,128,printed);
    }
    
    // if movecontrollock is unlocked //
    if global.movecontrollock = 1 {

        scrolltimer ++;        
        
        // if scrolltimer &gt;= 50, disables one time code and holding text, set scrolltimer to 0 //
        if scrolltimer &gt;= 50 {
            starthold = false;
            starttext = false;
            scrolltimer = 0;
        }
        
        // if holding text is disabled, if scroll timer &gt;= 3 // 
        if starthold = false {
            if scrolltimer &gt;= 3 {
                
                // character to be added = list(printedline, strcharpos) //
                // printed phrase = current printed phrase + character //
                //character = ds_list_find_value(printedline, strcharpos);
                printed = string_copy(printedline,1,strcharpos + 1)
                
                strcharpos ++;
                scrolltimer = 0;
                 
            }
        }
        
        // if list position &gt;= size of printing list, printing line = script start lines //
        if strcharpos &gt;= string_length(printedline) {
            starthold = true
                            
            if scrolltimer &gt;= 45 {
                room_goto(room_level1);
            }
        //printedline = scr_start_lines();
        }
                 
        // draw printed string with y + amount depending on printing line number //
        draw_text(128,128,printed);
    
    }
}
/// start game cut end ///
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawing player while recording start ///

with obj_player {
    if recording = true {
        draw_set_alpha(0.8);
        draw_sprite(spr_player,-1,recordstartingx,recordstartingy);
        draw_set_alpha(1);
    }
}

/// drawing player while recording end ///


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
