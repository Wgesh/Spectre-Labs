<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup ///

depth = -10000; // sets depth to very top of room
holdtimer = 0; // holds black screen for amount of time on fade in
fadetimer = 0; // controls fading effect timing of object

// if fadeout state, start object invisible //
if global.fadein = 1 {
    image_alpha = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fading effect ///

// if fadein state, decrease opacity on a timer
if global.fadein = 0 {
    if room != room_end {
        image_alpha -= 0.04;
        fadetimer += 1;
        
        // once completely invisible unlock movement and destroy self
        if fadetimer &lt; 25 {
            alarm[0] = 1;
        } else {
            if room != room_boss and room != room_start_cut {
                global.movecontrollock = false;
            }
            instance_destroy();
        }
    } else {
        image_alpha -= 0.01;
        fadetimer += 1;
        
        if fadetimer &lt; 100 {
            alarm[0] = 1;
        } else {
            instance_destroy();
        }
    }
}

// if fadeout state, increase opacity
if global.fadein = 1 {
    if room != room_outside {
        image_alpha += 0.04;
        fadetimer += 1;

        if fadetimer &lt; 25 {
            alarm[0] = 1;
        
        // choose room depending on current room
        } else {
            
            if room = room_title_screen {
                room_goto(room_level2);
            }
    
            if room = room_start_cut {
                room_goto(room_level1);
            }
            
            if room = room_level1 {
                room_goto(room_level2);
            }
            
            if room = room_level2 {
                room_goto(room_level3);
            }
            
            if room = room_level3 {
                room_goto(room_vent);
            }
            
            if room = room_vent {
                room_goto(room_control_room);
            }
            
            if room = room_control_room {
                room_goto(room_boss);
            }
            
            if room = room_boss {
                if global.restarting = true {
                    global.restarting = false;
                    room_goto(room_game_restart);
                } else {
                    room_goto(room_outside);
                }
            }
            
            if room = room_game_restart {
                room_goto(room_boss)
            }
        }
    // slow fade to black for final cut
    } else {
        image_alpha += 0.01;
        fadetimer += 1;
        
        if fadetimer &lt; 100 {
            alarm[0] = 1;
        } else {
            if room = room_outside {
                room_goto(room_end);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade initialize ///

// if fadeout state, if fadetimer 0 (start of fade), set alarm [0] (fading effect) //
if global.fadein = 1 {
    if fadetimer = 0 {
        alarm[0] = 1;
    }
}

// if fadein state, increase holdtimer to hold black //
if global.fadein = 0 {
    holdtimer += 1;
    
    // if holdtimer &gt; 15, if fadetimer 0 (start of fade), set alarm [0] (fading effect) //
    if holdtimer &gt; 15 {
        if fadetimer = 0 {
            alarm[0] = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
